//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file EventAction.cc
/// \brief Implementation of the EventAction class

#include "EventAction.hh"
#include "RunAction.hh"
#include "HistoManager.hh"
#include "G4Event.hh"
#include "G4RunManager.hh"
#include "G4ThreeVector.hh"

#include "EssHit.hh"
#include "G4SDManager.hh"
#include "G4HCofThisEvent.hh"

#include <vector>
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

EventAction::EventAction(RunAction* runAction)
: G4UserEventAction(),
  fRunAction(runAction)
{} 

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

EventAction::~EventAction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void EventAction::BeginOfEventAction(const G4Event*)
{
	NumOfElectronIn = 0;
	NumOfElectronOut = 0;
	EkinIn = 0.;
	EkinOut = 0.;

	Pos_Electron_Electrode_Vec.clear();
	Pos_Electron_Frame_Vec.clear();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void EventAction::EndOfEventAction(const G4Event* evt)
{ 
	/*if(NumOfElectronIn != 0.  ) G4AnalysisManager::Instance()->FillH1(0, NumOfElectronIn);
	if(NumOfElectronOut != 0. ) G4AnalysisManager::Instance()->FillH1(1, NumOfElectronOut);
	if(EkinIn  != 0. ) G4AnalysisManager::Instance()->FillH1(2, EkinIn/NumOfElectronIn);
	if(EkinOut != 0. ) G4AnalysisManager::Instance()->FillH1(3, EkinOut/NumOfElectronOut);

	G4int tmp1 = Pos_Electron_Electrode_Vec.size();
  if(tmp1 != 0){
			for(int i = 0 ; i < tmp1 ; i++){
					G4AnalysisManager::Instance()->FillH2(0, Pos_Electron_Electrode_Vec[i].x(), Pos_Electron_Electrode_Vec[i].z());
					G4AnalysisManager::Instance()->FillH2(1, Pos_Electron_Electrode_Vec[i].x(), Pos_Electron_Electrode_Vec[i].z());
			}
	}

	G4int tmp2 = Pos_Electron_Frame_Vec.size();
  if(tmp2 != 0){
			for(int i = 0 ; i < tmp2 ; i++){
					G4AnalysisManager::Instance()->FillH2(1, Pos_Electron_Frame_Vec[i].x(), Pos_Electron_Frame_Vec[i].z());
			}
	}

	Pos_Electron_Electrode_Vec.clear();
	Pos_Electron_Frame_Vec.clear();
	*/
	G4HCofThisEvent* hcte = evt->GetHCofThisEvent();
	G4int n_max_hc = G4SDManager::GetSDMpointer()->GetCollectionCapacity();
	EssHitsCollection* hc = 0;
	
	
	for (int i = 0; i < n_max_hc; ++i)
	{
			hc = (EssHitsCollection*)hcte->GetHC(i);
			int nHits = hc->entries();
			for (G4int j = 0; j < nHits; ++j)
			{
					EssHit* hit = (*hc)[j];
					G4ThreeVector pos = hit->GetPosition();
					if(pos.y() != -15) return;
					G4AnalysisManager::Instance()->FillH2(0, pos.x(), pos.z());
			}
	}
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
